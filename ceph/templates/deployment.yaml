---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  labels:
    app: ceph
    daemon: mds
  name: ceph-mds
spec:
  replicas: 1
  template:
    metadata:
      name: ceph-mds
      labels:
        app: ceph
        daemon: mds
    spec:
      nodeSelector:
        node-type: storage
      serviceAccount: default
      volumes:
        - name: ceph-conf
          secret:
            secretName: ceph-conf-combined
        - name: ceph-bootstrap-osd-keyring
          secret:
            secretName: ceph-bootstrap-osd-keyring
        - name: ceph-bootstrap-mds-keyring
          secret:
            secretName: ceph-bootstrap-mds-keyring
        - name: ceph-bootstrap-rgw-keyring
          secret:
            secretName: ceph-bootstrap-rgw-keyring
      containers:
        - name: ceph-mon
          image: {{ .Values.image_ceph_daemon }}
          ports:
            - containerPort: 6800
          env:
            - name: CEPH_DAEMON
              value: MDS
            - name: CEPHFS_CREATE
              value: "1"
            - name: KV_TYPE
              value: k8s
            - name: CLUSTER
              value: ceph
          volumeMounts:
            - name: ceph-conf
              mountPath: /etc/ceph
            - name: ceph-bootstrap-osd-keyring
              mountPath: /var/lib/ceph/bootstrap-osd
            - name: ceph-bootstrap-mds-keyring
              mountPath: /var/lib/ceph/bootstrap-mds
            - name: ceph-bootstrap-rgw-keyring
              mountPath: /var/lib/ceph/bootstrap-rgw
          livenessProbe:
              tcpSocket:
                port: 6800
              initialDelaySeconds: 60
              timeoutSeconds: 5
          readinessProbe:
              tcpSocket:
                port: 6800
              timeoutSeconds: 5
          resources:
            requests:
              memory: "10Mi"
              cpu: "250m"
            limits:
              memory: "50Mi"
              cpu: "500m"
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  labels:
    app: ceph
    daemon: moncheck
  name: ceph-mon-check
spec:
  replicas: 1
  template:
    metadata:
      name: ceph-mon
      labels:
        app: ceph
        daemon: moncheck
    spec:
      serviceAccount: default
      volumes:
        - name: ceph-conf
          secret:
            secretName: ceph-conf-combined
        - name: ceph-bootstrap-osd-keyring
          secret:
            secretName: ceph-bootstrap-osd-keyring
        - name: ceph-bootstrap-mds-keyring
          secret:
            secretName: ceph-bootstrap-mds-keyring
        - name: ceph-bootstrap-rgw-keyring
          secret:
            secretName: ceph-bootstrap-rgw-keyring
      containers:
        - name: ceph-mon
          image: {{ .Values.image_ceph_daemon }}
          imagePullPolicy: Always
          ports:
            - containerPort: 6789
          env:
            - name: CEPH_DAEMON
              value: MON_HEALTH
            - name: KV_TYPE
              value: k8s
            - name: MON_IP_AUTO_DETECT
              value: "1"
            - name: CLUSTER
              value: ceph
          volumeMounts:
            - name: ceph-conf
              mountPath: /etc/ceph
            - name: ceph-bootstrap-osd-keyring
              mountPath: /var/lib/ceph/bootstrap-osd
            - name: ceph-bootstrap-mds-keyring
              mountPath: /var/lib/ceph/bootstrap-mds
            - name: ceph-bootstrap-rgw-keyring
              mountPath: /var/lib/ceph/bootstrap-rgw
          resources:
            requests:
              memory: "5Mi"
              cpu: "250m"
            limits:
              memory: "50Mi"
              cpu: "500m"
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  labels:
    app: ceph
    daemon: mon
  name: ceph-mon
spec:
  replicas: 3
  template:
    metadata:
      name: ceph-mon
      labels:
        app: ceph
        daemon: mon
      annotations:
        # alanmeadows: this soft requirement allows single
        # host deployments to spawn several ceph-mon
        # containers
        scheduler.alpha.kubernetes.io/affinity: >
          {
            "podAntiAffinity": {
              "preferredDuringSchedulingIgnoredDuringExecution": [{
                "labelSelector": {
                  "matchExpressions": [{
                    "key": "daemon",
                    "operator": "In",
                    "values":["mon"]
                  }]
                },
              "topologyKey": "kubernetes.io/hostname",
              "weight": 10
              }]
            }
          }
    spec:
      serviceAccount: default
      volumes:
        - name: ceph-conf
          secret:
            secretName: ceph-conf-combined
        - name: ceph-bootstrap-osd-keyring
          secret:
            secretName: ceph-bootstrap-osd-keyring
        - name: ceph-bootstrap-mds-keyring
          secret:
            secretName: ceph-bootstrap-mds-keyring
        - name: ceph-bootstrap-rgw-keyring
          secret:
            secretName: ceph-bootstrap-rgw-keyring
      containers:
        - name: ceph-mon
          image: {{ .Values.image_ceph_daemon }}
#          imagePullPolicy: Always
          lifecycle:
            preStop:
                exec:
                  # remove the mon on Pod stop.
                  command:
                    - "/remove-mon.sh"
          ports:
            - containerPort: 6789
          env:
            - name: CEPH_DAEMON
              value: MON
            - name: KV_TYPE
              value: k8s
            - name: NETWORK_AUTO_DETECT
              value: "1"
            - name: CLUSTER
              value: ceph
          volumeMounts:
            - name: ceph-conf
              mountPath: /etc/ceph
            - name: ceph-bootstrap-osd-keyring
              mountPath: /var/lib/ceph/bootstrap-osd
            - name: ceph-bootstrap-mds-keyring
              mountPath: /var/lib/ceph/bootstrap-mds
            - name: ceph-bootstrap-rgw-keyring
              mountPath: /var/lib/ceph/bootstrap-rgw
          livenessProbe:
              tcpSocket:
                port: 6789
              initialDelaySeconds: 60
              timeoutSeconds: 5
          readinessProbe:
              tcpSocket:
                port: 6789
              timeoutSeconds: 5
          resources:
            requests:
              memory: "50Mi"
              cpu: "1000m"
            limits:
              memory: "100Mi"
              cpu: "2000m"
---
kind: Deployment
apiVersion: extensions/v1beta1
metadata:
  labels:
    app: ceph
    daemon: rgw 
  name: ceph-rgw
spec:
  replicas: 3
  template:
    metadata:
      name: ceph-rgw
      labels:
        app: ceph
        daemon: rgw
    spec:
      hostNetwork: true
      nodeSelector:
        node-type: storage
      serviceAccount: default
      volumes:
        - name: ceph-conf
          secret:
            secretName: ceph-conf-combined
        - name: ceph-bootstrap-osd-keyring
          secret:
            secretName: ceph-bootstrap-osd-keyring
        - name: ceph-bootstrap-mds-keyring
          secret:
            secretName: ceph-bootstrap-mds-keyring
        - name: ceph-bootstrap-rgw-keyring
          secret:
            secretName: ceph-bootstrap-rgw-keyring
      containers:
        - name: ceph-rgw
          image: {{ .Values.image_ceph_daemon }}
          ports:
            - containerPort: {{ .Values.ceph_rgw_target_port }}
          env:
            - name: RGW_CIVETWEB_PORT
              value: "{{ .Values.ceph_rgw_target_port }}"
            - name: CEPH_DAEMON
              value: RGW
            - name: KV_TYPE
              value: k8s
            - name: CLUSTER
              value: ceph
          volumeMounts:
            - name: ceph-conf
              mountPath: /etc/ceph
            - name: ceph-bootstrap-osd-keyring
              mountPath: /var/lib/ceph/bootstrap-osd
            - name: ceph-bootstrap-mds-keyring
              mountPath: /var/lib/ceph/bootstrap-mds
            - name: ceph-bootstrap-rgw-keyring
              mountPath: /var/lib/ceph/bootstrap-rgw
          livenessProbe:
              httpGet:
                path: /
                port: {{ .Values.ceph_rgw_target_port }}
              initialDelaySeconds: 120
              timeoutSeconds: 5
          readinessProbe:
              httpGet:
                path: /
                port: {{ .Values.ceph_rgw_target_port }}
              timeoutSeconds: 5
          resources:
            requests:
              memory: "500Mi"
              cpu: ".5"
            limits:
              memory: "500Mi"
              cpu: ".5"
